(()=>{"use strict";class e{constructor(e){this.value=null,this.next=null}}const t=new class{constructor(){this.head=null}append(t){const n=new e;if(n.value=t,this.head){let e=this.head;for(;e.next;)e=e.next;e.next=n}else this.head=n}prepend(t){const n=new e;n.value=t,n.next=this.head,this.head=n}size(){let e=this.head,t=0;for(;e;)t++,e=e.next;return t}firstNode(){return this.head.value}tail(){let e=this.head;for(;e&&e.next;)e=e.next;return e.value}atIndex(e){let t=this.head,n=0;for(;t;){if(n===e)return t.value;t=t.next,n++}return null}pop(){if(!this.head)return void console.log("List is empty");if(!this.head.next)return void(this.head=null);let e=this.head;for(;e.next&&e.next.next;)e=e.next;e.next=null}contains(e){let t=this.head;for(;t;){if(t.value===e)return console.log("True. This value was found."),!0;t=t.next}return console.log("False. This value was not found."),!1}find(e){let t=this.head,n=0;for(;t;){if(t.value===e)return console.log("This is the index of the input value.",n),n;t=t.next,n++}return console.log("This value was not found."),null}toString(){let e=this.head,t="";for(;e;)t+=`(${e.value})`,e.next&&(t+=" ->"),e=e.next;return t+=" -> null",t}printList(){let e=this.head;for(;e;)console.log(e.value),e=e.next}};t.append("dog"),t.append("cat"),t.append("parrot"),t.append("hamster"),t.append("snake"),t.append("turtle"),console.log(t.toString())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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ZXMiOlsid2VicGFjazovL2xpbmtlZC1saXN0cy8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly9saW5rZWQtbGlzdHMvLi9zcmMvbWFpbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBOb2RlIHtcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xuICAgICAgdGhpcy52YWx1ZSA9IG51bGw7IC8vIFRoZSBkYXRhIHN0b3JlZCBpbiB0aGUgbm9kZVxuICAgICAgdGhpcy5uZXh0ID0gbnVsbDsgICAvLyBSZWZlcmVuY2UgdG8gdGhlIG5leHQgbm9kZVxuICAgIH1cbiAgfVxuXG4gIGNsYXNzIExpbmtlZExpc3Qge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgdGhpcy5oZWFkID0gbnVsbDsgLy8gRmlyc3Qgbm9kZSBpbiB0aGUgbGlzdFxuICAgIH1cbiAgICBcbiAgICBhcHBlbmQodmFsdWUpIHtcbiAgICAgICAgY29uc3QgbmV3Tm9kZSA9IG5ldyBOb2RlKCk7XG4gICAgICAgIG5ld05vZGUudmFsdWUgPSB2YWx1ZTtcblxuICAgICAgICBpZiAoIXRoaXMuaGVhZCkge1xuICAgICAgICAgIHRoaXMuaGVhZCA9IG5ld05vZGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGV0IGN1cnJlbnQgPSB0aGlzLmhlYWQ7XG4gICAgICAgICAgd2hpbGUgKGN1cnJlbnQubmV4dCkge1xuICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQubmV4dDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY3VycmVudC5uZXh0ID0gbmV3Tm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIFxuICAgIHByZXBlbmQodmFsdWUpIHtcbiAgICAgICAgY29uc3QgbmV3Tm9kZSA9IG5ldyBOb2RlKCk7XG4gICAgICAgIG5ld05vZGUudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgXG4gICAgICAgIG5ld05vZGUubmV4dCA9IHRoaXMuaGVhZDtcbiAgICAgICAgdGhpcy5oZWFkID0gbmV3Tm9kZTtcbiAgICB9XG4gICAgXG4gICAgc2l6ZSgpIHtcbiAgICAgICAgbGV0IGN1cnJlbnQgPSB0aGlzLmhlYWQ7XG4gICAgICAgIGxldCBzaXplID0gMDtcblxuICAgICAgICB3aGlsZSAoY3VycmVudCkge1xuICAgICAgICAgICAgc2l6ZSsrO1xuICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQubmV4dFxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNpemVcbiAgICB9XG5cbiAgICBmaXJzdE5vZGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhlYWQudmFsdWU7XG4gICAgfVxuXG4gICAgdGFpbCgpIHtcbiAgICAgICAgbGV0IGN1cnJlbnQgPSB0aGlzLmhlYWQ7XG5cbiAgICAgICAgd2hpbGUgKGN1cnJlbnQgJiYgY3VycmVudC5uZXh0KSB7XG4gICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjdXJyZW50LnZhbHVlXG4gICAgfVxuXG4gICAgYXRJbmRleChpbmRleCkge1xuICAgICAgICBsZXQgY3VycmVudCA9IHRoaXMuaGVhZDtcbiAgICAgICAgbGV0IGN1cnJlbnRJbmRleCA9IDBcblxuICAgICAgICB3aGlsZSAoY3VycmVudCl7XG4gICAgICAgICAgICBpZiAoY3VycmVudEluZGV4ID09PSBpbmRleCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50LnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQubmV4dDtcbiAgICAgICAgICAgIGN1cnJlbnRJbmRleCsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHBvcCgpIHtcblxuICAgICAgICBpZiAoIXRoaXMuaGVhZCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJMaXN0IGlzIGVtcHR5XCIpO1xuICAgICAgICAgICAgcmV0dXJuOyAvLyBJZiB0aGUgbGlzdCBpcyBlbXB0eSwgcmV0dXJuIGVhcmx5XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgLy8gU3BlY2lhbCBjYXNlOiBpZiB0aGVyZSdzIG9ubHkgb25lIG5vZGUgaW4gdGhlIGxpc3RcbiAgICAgICAgaWYgKCF0aGlzLmhlYWQubmV4dCkge1xuICAgICAgICAgICAgdGhpcy5oZWFkID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybjsgLy8gSWYgdGhlcmUncyBvbmUgbm9kZSwgc2V0cyB0aGUgZmlyc3Qgbm9kZSB0byBudWxsXG4gICAgICAgIH1cblxuICAgICAgICBsZXQgY3VycmVudCA9IHRoaXMuaGVhZDtcbiAgICAgICAgd2hpbGUgKGN1cnJlbnQubmV4dCAmJiBjdXJyZW50Lm5leHQubmV4dCkge1xuICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQubmV4dFxuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQubmV4dCA9IG51bGxcbiAgICB9XG5cbiAgICBjb250YWlucyh2YWx1ZSkge1xuICAgICAgICBsZXQgY3VycmVudCA9IHRoaXMuaGVhZDtcblxuICAgICAgICB3aGlsZShjdXJyZW50KXtcbiAgICAgICAgICAgIGlmIChjdXJyZW50LnZhbHVlID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVHJ1ZS4gVGhpcyB2YWx1ZSB3YXMgZm91bmQuXCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coXCJGYWxzZS4gVGhpcyB2YWx1ZSB3YXMgbm90IGZvdW5kLlwiKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZmluZCh2YWx1ZSl7XG4gICAgICAgIGxldCBjdXJyZW50ID0gdGhpcy5oZWFkO1xuICAgICAgICBsZXQgY3VycmVudEluZGV4ID0gMDtcblxuICAgICAgICB3aGlsZShjdXJyZW50KXtcbiAgICAgICAgICAgIGlmIChjdXJyZW50LnZhbHVlID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVGhpcyBpcyB0aGUgaW5kZXggb2YgdGhlIGlucHV0IHZhbHVlLlwiLCBjdXJyZW50SW5kZXgpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRJbmRleFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQubmV4dDtcbiAgICAgICAgICAgIGN1cnJlbnRJbmRleCsrO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKFwiVGhpcyB2YWx1ZSB3YXMgbm90IGZvdW5kLlwiKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB0b1N0cmluZygpe1xuICAgICAgICBsZXQgY3VycmVudCA9IHRoaXMuaGVhZDtcbiAgICAgICAgbGV0IHJlc3VsdCA9ICcnO1xuXG4gICAgICAgIHdoaWxlKGN1cnJlbnQpe1xuICAgICAgICAgICAgcmVzdWx0ICs9IGAoJHtjdXJyZW50LnZhbHVlfSlgO1xuICAgICAgICAgICAgaWYoY3VycmVudC5uZXh0KXtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gJyAtPidcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHRcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgKz0gJyAtPiBudWxsJ1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAgIFxuICAgICAgcHJpbnRMaXN0KCkge1xuICAgICAgICBsZXQgY3VycmVudCA9IHRoaXMuaGVhZDtcbiAgICAgICAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhjdXJyZW50LnZhbHVlKTtcbiAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0O1xuICAgICAgICB9XG4gICAgICB9XG4gIH1cblxuXG4gIGV4cG9ydCBkZWZhdWx0IExpbmtlZExpc3Q7IiwiaW1wb3J0IExpbmtlZExpc3QgZnJvbSAnLi9pbmRleCdcblxuY29uc3QgbGlzdCA9IG5ldyBMaW5rZWRMaXN0KCk7XG5cbmxpc3QuYXBwZW5kKFwiZG9nXCIpO1xubGlzdC5hcHBlbmQoXCJjYXRcIik7XG5saXN0LmFwcGVuZChcInBhcnJvdFwiKTtcbmxpc3QuYXBwZW5kKFwiaGFtc3RlclwiKTtcbmxpc3QuYXBwZW5kKFwic25ha2VcIik7XG5saXN0LmFwcGVuZChcInR1cnRsZVwiKTtcblxuY29uc29sZS5sb2cobGlzdC50b1N0cmluZygpKTsiXSwibmFtZXMiOlsiTm9kZSIsImNvbnN0cnVjdG9yIiwidmFsdWUiLCJ0aGlzIiwibmV4dCIsImxpc3QiLCJoZWFkIiwiYXBwZW5kIiwibmV3Tm9kZSIsImN1cnJlbnQiLCJwcmVwZW5kIiwic2l6ZSIsImZpcnN0Tm9kZSIsInRhaWwiLCJhdEluZGV4IiwiaW5kZXgiLCJjdXJyZW50SW5kZXgiLCJwb3AiLCJjb25zb2xlIiwibG9nIiwiY29udGFpbnMiLCJmaW5kIiwidG9TdHJpbmciLCJyZXN1bHQiLCJwcmludExpc3QiXSwic291cmNlUm9vdCI6IiJ9